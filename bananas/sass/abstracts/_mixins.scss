// ----------- grid

$breakpoints: (
  359: 359px,
  480: 480px,
  576: 576px,
  767: 767px,
  992: 992px,
  1024: 1024px,	
  1200: 1200px
);

@mixin grid($breakpoint) { 
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}



// ----------- mixin transform
@mixin transform($transforms) {	
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

// ----------- mixin transform rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

// ----------- mixin transform scale
@mixin scale($scale) {
	@include transform(scale($scale));
}

// ----------- mixin transform translate
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

// ----------- mixin transform skew
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

// ----------- mixin transform origin
@mixin transform-origin ($origin) {
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}



@mixin overlay(){
	position: absolute; 
	top: 0; 
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin center(){
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin flexCenter(){
	display: flex;
	align-items: center;
}

@mixin paddingLeftRight($left, $right){
	padding-left: $left;
	padding-right: $right;
}
@mixin paddingTopBottom($top, $bottom){
	padding-top: $top;
	padding-bottom: $bottom;
}

@mixin marginLeftRight($left, $right){
	margin-left: $left;
	margin-right: $right;
}
@mixin marginTopBottom($top, $bottom){
	margin-top: $top;
	margin-bottom: $bottom;
}


@mixin background($color, $position, $repeat, $size){
	background-color: $color;
	background-position: $position;
	background-repeat: $repeat;
	background-size: $size;
}


